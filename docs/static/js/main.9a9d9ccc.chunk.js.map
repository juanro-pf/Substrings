{"version":3,"sources":["features/appSlice.js","components/Detector.js","components/App.js","app/store.js","index.js"],"names":["appSlice","createSlice","name","initialState","inputText","highlightArray","reducers","updateInputText","state","action","payload","updateHighlightArray","actions","Detector","dispatch","useDispatch","useSelector","app","useState","find","replace","setState","useEffect","changeHighlight","index","indexOf","j","length","push","handleInputChange","target","value","className","placeholder","onChange","onClick","replaceAll","App","textArray","split","e","map","el","i","style","includes","color","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"wOAOaA,EAAUC,YAAY,CACjCC,KAAM,MACNC,aAPkB,CAClBC,UAAW,GACXC,eAAgB,IAMhBC,SAAU,CACRC,gBAAiB,SAACC,EAAOC,GACvBD,EAAMJ,UAAWK,EAAOC,SAE1BC,qBAAsB,SAACH,EAAOC,GAC5BD,EAAMH,eAAgBI,EAAOC,YAK5B,EAAiDV,EAASY,QAAlDL,EAAR,EAAQA,gBAAiBI,EAAzB,EAAyBA,qBAEjBX,IAAf,Q,qCCkFea,EAhGE,WAGf,IAAMC,EAAUC,cAEhB,EAAqBC,aAAY,SAAAR,GAAK,OAAIA,EAAMS,OAAxCb,EAAR,EAAQA,UAER,EAA0Bc,mBAAS,CACjCC,KAAM,GACNC,QAAS,KAFX,mBAAOZ,EAAP,KAAca,EAAd,KAIQF,EAAiBX,EAAjBW,KAAMC,EAAWZ,EAAXY,QAIdE,qBAAU,WACRC,MACC,CAACnB,EAAWe,IAEf,IAAId,EAAgB,GAChBmB,EAAM,EAEJD,EAAiB,WAGrB,GAFAC,EAAO,EACPnB,EAAgB,GACN,KAAPc,EAAW,GAEZ,IAAc,KADdK,EAAOpB,EAAUqB,QAAQN,EAAMK,IACf,CAEd,IAAI,IAAIE,EAAEF,EAAOE,EAAEF,EAAQL,EAAKQ,OAAQD,IACtCrB,EAAeuB,KAAKF,GAEtBF,GAAeL,EAAKQ,eAEP,IAATH,GACRV,EAASH,EAAqBN,KAI1BwB,EAAmB,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACzBT,EAAS,2BACJb,GADG,kBAELsB,EAAO5B,KAAO4B,EAAOC,UAc1B,OACE,sBAAKC,UAAU,qBAAf,UACE,sBAAKA,UAAU,2BAAf,UACE,0BACEC,YAAY,kBACZ/B,KAAK,OACL6B,MAAOZ,EACPe,SAAUL,IAEZ,wBACEG,UAAU,0CACVG,QArBa,WACnBrB,EAASP,EAAgBH,EAAUgC,WAAWjB,EAAM,OAkBhD,uBAOF,sBAAKa,UAAU,2BAAf,UACE,0BACEC,YAAY,kBACZ/B,KAAK,UACL6B,MAAOX,EACPc,SAAUL,IAEZ,wBACEG,UAAU,2CACVG,QA9Bc,WACP,KAAVf,GAAcN,EAASP,EAAgBH,EAAUgC,WAAWjB,EAAMC,MA2BjE,4BCxCOiB,G,MAtCH,WAEV,IAAMvB,EAAUC,cAEhB,EAAqCC,aAAY,SAAAR,GAAK,OAAIA,EAAMS,OAAxDb,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,eAKbiC,EAAWlC,EAAUmC,MAAM,IAOjC,OACE,sBAAKP,UAAU,iBAAf,UACE,0EACA,0BAAUA,UAAU,0BAClBC,YAAW,gCACXF,MAAO3B,EACP8B,SAXmB,SAAAM,GACvB1B,EAASP,EAAgBiC,EAAEV,OAAOC,WAYhC,qBAAKC,UAAU,qBAAf,SAEIM,EAAUG,KAAI,SAACC,EAAIC,GAAL,OAAW,sBAAcC,MAAOvC,EAAewC,SAASF,GAAK,CAACG,MAAO,OAAS,GAAnE,SAAwEJ,GAA7DC,QAGxC,cAAC,EAAD,SCnCOI,EAAQC,YAAe,CAClCC,QAAS,CACPhC,IAAKjB,K,MCETkD,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.9a9d9ccc.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState= {\r\n  inputText: '',\r\n  highlightArray: []\r\n}\r\n\r\nexport const appSlice= createSlice({\r\n  name: 'app',\r\n  initialState,\r\n  reducers: {\r\n    updateInputText: (state, action) => {\r\n      state.inputText= action.payload\r\n    },\r\n    updateHighlightArray: (state, action) => {\r\n      state.highlightArray= action.payload\r\n    }\r\n  }\r\n});\r\n\r\nexport const { updateInputText, updateHighlightArray }= appSlice.actions;\r\n\r\nexport default appSlice.reducer;","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateInputText, updateHighlightArray } from '../features/appSlice';\r\n// import Proptypes from 'prop-types';\r\nimport './Detector.css';\r\n\r\n// ALL THE COMMENTED STUFF WAS USED BEFORE IMPLEMENTING REDUX\r\n\r\nconst Detector = () => {\r\n// const Detector = props => {\r\n\r\n  const dispatch= useDispatch();\r\n\r\n  const { inputText }= useSelector(state => state.app);\r\n\r\n  const [state, setState] = useState({\r\n    find: '',\r\n    replace: ''\r\n  });\r\n  const { find, replace }= state;\r\n\r\n  // const {inputText, setInputText, setHighlightArray}= props;\r\n\r\n  useEffect(() => {\r\n    changeHighlight();\r\n  }, [inputText, find]);\r\n\r\n  let highlightArray= [];\r\n  let index=0;\r\n\r\n  const changeHighlight= () => {\r\n    index= 0;\r\n    highlightArray= [];\r\n    if(find!=='') do {\r\n      index= inputText.indexOf(find, index);\r\n      if(index !== -1){\r\n        // highlightArray.push(index);\r\n        for(let j=index; j<index + find.length; j++){\r\n          highlightArray.push(j);\r\n        }\r\n        index= index + find.length;\r\n      }\r\n    } while(index!==-1);\r\n    dispatch(updateHighlightArray(highlightArray));\r\n    // setHighlightArray(highlightArray);\r\n  };\r\n\r\n  const handleInputChange= ({target}) => {\r\n    setState({\r\n      ...state,\r\n      [target.name]: target.value\r\n    });\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    dispatch(updateInputText(inputText.replaceAll(find, '')));\r\n    // setInputText(inputText.replaceAll(find, ''));\r\n  };\r\n\r\n  const handleReplace = () => {\r\n    if(replace!=='') dispatch(updateInputText(inputText.replaceAll(find, replace)));\r\n    // if(replace!=='') setInputText(inputText.replaceAll(find, replace));\r\n  };\r\n\r\n  return (\r\n    <div className='detector_container' >\r\n      <div className='detector_container_inner' >\r\n        <textarea\r\n          placeholder='Text to find...'\r\n          name='find'\r\n          value={find}\r\n          onChange={handleInputChange}\r\n        />\r\n        <button\r\n          className='detector_container_inner_button--remove'\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      </div>\r\n      <div className='detector_container_inner' >\r\n        <textarea\r\n          placeholder='Replace with...'\r\n          name='replace'\r\n          value={replace}\r\n          onChange={handleInputChange}\r\n        />\r\n        <button\r\n          className='detector_container_inner_button--replace'\r\n          onClick={handleReplace}\r\n        >\r\n          Replace\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\n// Detector.propTypes= {\r\n//   inputText: Proptypes.string.isRequired,\r\n//   setInputText: Proptypes.func.isRequired,\r\n//   setHighlightArray: Proptypes.func.isRequired\r\n// }\r\n\r\nexport default Detector;\r\n","import React from 'react';\n// import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateInputText } from '../features/appSlice';\nimport Detector from './Detector';\nimport './App.css';\n\n// ALL THE COMMENTED STUFF WAS USED BEFORE IMPLEMENTING REDUX\n\nconst App = () => {\n\n  const dispatch= useDispatch();\n\n  const { inputText, highlightArray }= useSelector(state => state.app);\n\n  // const [text, setText] = useState('');\n  // const [highlightArray, setHighlightArray] = useState([]);\n\n  const textArray= inputText.split('');\n\n  const handleInputChange= e => {\n    dispatch(updateInputText(e.target.value));\n    // setText(e.target.value);\n  };\n\n  return (\n    <div className='main_container'>\n      <h1>Start typing some words to see the magic</h1>\n      <textarea className='main_container_textarea'\n        placeholder={`Don't be shy, start typing...`}\n        value={inputText}\n        onChange={handleInputChange}\n      />\n      <div className='main_container_div'>\n        {\n          textArray.map((el, i) => <span key={i} style={highlightArray.includes(i) ? {color: 'red'} : {}}>{el}</span>)\n        }\n      </div>\n      <Detector\n        // inputText={inputText}\n        // setInputText={setText}\n        // setHighlightArray={setHighlightArray}\n      />\n    </div>\n  )\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport appSlice from '../features/appSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    app: appSlice\r\n  }\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './app/store';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <Provider store={store} >\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}